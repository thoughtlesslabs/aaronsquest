pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- aaron's quest
-- a thoughtless labs experiment

function _init()
 _update60= update_menu
	_draw= draw_menu
	movable_items = {}
	keycode = {}
	init_player()
	init_map()
	add_keycode()
	add_movables()
	reading=false
	show_inventory=false
end

function init_map()
 wall = {3,4,59,7,39,49,24,25,5,26,1,2,50,21,40,56,57}
 door = {5,26}
 cavedoor = {41}
 opendoor ={6,27}
 key = {32,16}
 waterwalk={22}
end

function init_player()
	p = {}
	p.x = 1
	p.y = 1
	p.sprite = 8
	p.keys = 0
end

function init_code(x,y,k,sprite)
 code = {}
 code.x = x
 code.y = y
 code.key = k
 code.sprite = sprite
 code.show = false
 add(keycode,code)
end

function add_keycode()
	init_code(5,2,"a",53)
	init_code(12,2,"b",37)
	init_code(13,7,"c",37)
	init_code(46,1,"d",9)
	init_code(19,9,"e",37)
	init_code(34,24,"f",21)
	init_code(0,0,"g",37)
	init_code(0,0,"h",37)
	init_code(0,0,"i",37)
	init_code(0,0,"j",37)
	init_code(0,0,"k",37)
	init_code(0,0,"l",37)
	init_code(0,0,"m",37)
 init_code(0,0,"n",37)
 init_code(0,0,"o",37)
end

function init_movable(x,y,sprite)
	mi = {}
	mi.x = x
	mi.y = y
	mi.active = false
	mi.sprite = sprite
	add(movable_items,mi)
end

function add_movables()
	--add movable boxes
	init_movable(11,10,21)
	init_movable(7,8,21)
	
	-- add movable rocks
	init_movable(4,2,19)
	init_movable(17,6,35)
	init_movable(12,2,35)
	init_movable(30,12,58)
	init_movable(40,8,59)
	init_movable(40,3,59)
	init_movable(37,12,59)
	init_movable(45,5,59)
	init_movable(36,10,59)
	init_movable(35,5,59)
	init_movable(38,12,59)
end	


	



-->8
-- update functions

function update_menu()
	if btnp(5) then
		_update60 = update_game
		_draw = draw_game
		tb_init(0,intro_story)
	end
end

function update_game()
 
 calc_code()
 if reading then
  tb_update()
 else
  move_player()
  if btnp(4) then
  	display_inventory()
  end
 end
end

function move_player()
	
	newx = p.x
	newy = p.y

	if btnp(0) then newx -=1 push="right" end
	if btnp(1) then newx +=1 push="left" end
	if btnp(2) then newy -=1 push="up" end
	if btnp(3) then newy +=1 push="down" end
	
	interact(newx,newy)
	
	if can_move(newx,newy) then
		p.x = mid(0,newx,127)
		p.y = mid(0,newy,63)
	else
		sfx(0)
	end
end
-->8
-- draw functions

function draw_menu()
	cls()
	spr(64,36,45,7,4)
	print("press ❎ to start",32,90,6)
end

function draw_game()
	cls()
	draw_map()
	draw_keycode()
	draw_player()
	draw_movables()
	tb_draw()
	draw_inventory()
end

function draw_map()

	mapx = flr(p.x/16)*16
	mapy = flr(p.y/16)*16
	
	camera(mapx*8,mapy*8)
	
	map(0,0,0,0,128,64)
end

function draw_player()
	spr(p.sprite,p.x*8,p.y*8)
end

function draw_movables()
 for i=1, #movable_items do
 	spr(movable_items[i].sprite,movable_items[i].x*8,movable_items[i].y*8)
	end
end

function draw_keycode()
	ky = keycode
	for i=1, #ky do
		spr(ky[i].sprite,ky[i].x*8,ky[i].y*8)
	end
end

function draw_inventory()
 mapx=mapx*8
 mapy=mapy*8
 if show_inventory then
 	local mx1=0 my1=15 mx2=127 my2=50
	 rectfill(mapx+mx1,mapy+my1,mapx+mx2,mapy+my2,0)
 	rect(mapx+mx1,mapy+my1,mapx+mx2,mapy+my2,7)
	 print("inventory",mapx+44,mapy+20,7)
	 print("\n\nkeys: "..p.keys.."\ncode: "..showcode,mapx+5,mapy+20,7)
	end
end
-->8
-- game functions

--  check if the player can move
function can_move(x,y)
	if is_tile(wall,x,y) or is_movable(x,y) then
		return false
	else
		return true
	end
end

-- check for tile type
function is_tile(tile_type,x,y)
	tile = mget(x,y)
	for i=1,#tile_type do
		if tile == tile_type[i] then
			return true
		end
	end
	return false
end

-- check if hit crate
function is_movable(x,y)
	for i=1,#movable_items do
		if x == movable_items[i].x and y==movable_items[i].y then
			return true
		end
	end
	return false
end

-- check if a keycode
function is_keycode(x,y)
	for i=1,#keycode do
		if not keycode[i].show then
		if x == keycode[i].x and y == keycode[i].y then
			return true
		end
	end
	end
	return false
end


-- interaction options based
-- on the tile
function interact(x,y)
	if is_tile(door,x,y) then
		if p.keys>0 then
	 	swap_tile(x,y)
	 	p.keys -=1
	 else
	 	tb_init(0,{"the door is locked"})
	 end
	elseif is_tile(waterwalk,x,y) then
		swap_tile(x,y)
	elseif is_movable(x,y) then
		for i=1,#movable_items do
			if x == movable_items[i].x and y== movable_items[i].y then
				movable_items[i].active = true
			end
		end
		move_item(x,y)
	elseif is_tile(key,x,y) then
		p.keys+=1
		swap_tile(x,y)
		sfx(1)
		if is_keycode(x,y) then
			update_code(x,y)
			extranote = "\nand a piece of the puzzle"
		else
			extranote = ""
		end
		tb_init(0,{"you found a key!"..extranote})
	elseif is_keycode(x,y) then
		sfx(1)
		inventory_clue = ""
		for i=1,#keycode do
			
			if x == keycode[i].x and y==keycode[i].y and keycode[i].key == "a" then
				inventory_clue="\ncheck your inventory with 🅾️"
			end
		end
		tb_init(0,{"you found a magic scroll!\n"..inventory_clue})
		update_code(x,y)
	end
end
		
		
-- swap and unswap tiles
function swap_tile(x,y)
	tile = mget(x,y)
	mset(x,y,tile+1)
end

-- push a crate
function move_item(x,y)

	nx = x
	ny = y
	
	for i=1,#movable_items do
		if movable_items[i].active then
		
			if push == "left" then
				nx +=1
			elseif push == "right" then
			 nx -=1
			elseif push == "up" then
				ny -=1
			elseif push == "down" then
				ny +=1
			end
			if can_move(nx,ny) then
				if not is_keycode(nx,ny) then
					if not is_tile(cavedoor,nx,ny) then
						movable_items[i].x = mid(0,nx,127)
						movable_items[i].y = mid(0,ny,63)
				 end
				end
			end
		movable_items[i].active = false
		end
	end
end

-- update found code letters
function update_code(x,y)
	for i=1,#keycode do
		if x == keycode[i].x and y == keycode[i].y then
			keycode[i].show = true
			keycode[i].sprite += 1
		end
	end
end

-- calculate code inventory
function calc_code()
	local chrs={"","","","","","","","","","","","","","","",""}
 for i=1,#keycode do
 	if keycode[i].show then
 	 chrs[i] = keycode[i].key
 	else
 		chrs[i] = " "
 	end
 end
 showcode = chrs[1]
 ..chrs[2]
 ..chrs[3]
 ..chrs[4]
 ..chrs[5]
 ..chrs[6]
 ..chrs[7]
 ..chrs[8]
 ..chrs[9]
 ..chrs[10]
 ..chrs[11]
 ..chrs[12]
 ..chrs[13]
 ..chrs[14]
 ..chrs[15]
 ..chrs[16]
end

function display_inventory()
	if show_inventory == false then
		show_inventory = true
	else
		show_inventory = false
	end
end
-->8
-- text boxes

function tb_init(voice,string) -- this function starts and defines a text box.
 reading=true -- sets reading to true when a text box has been called.
 tb={ -- table containing all properties of a text box. i like to work with tables, but you could use global variables if you preffer.
 str=string, -- the strings. remember: this is the table of strings you passed to this function when you called on _update()
 voice=voice, -- the voice. again, this was passed to this function when you called it on _update()
 i=1, -- index used to tell what string from tb.str to read.
 cur=0, -- buffer used to progressively show characters on the text box.
 char=0, -- current character to be drawn on the text box.
 x=0, -- x coordinate
 y=106, -- y coordginate
 w=127, -- text box width
 h=21, -- text box height
 col1=0, -- background color
 col2=7, -- border color
 col3=7, -- text color
 }
end

function tb_update()  -- this function handles the text box on every frame update.
 if tb.char<#tb.str[tb.i] then -- if the message has not been processed until it's last character:
     tb.cur+=0.5 -- increase the buffer. 0.5 is already max speed for this setup. if you want messages to show slower, set this to a lower number. this should not be lower than 0.1 and also should not be higher than 0.9
     if tb.cur>0.9 then -- if the buffer is larger than 0.9:
         tb.char+=1 -- set next character to be drawn.
         tb.cur=0    -- reset the buffer.
         if (ord(tb.str[tb.i],tb.char)!=32) sfx(tb.voice) -- play the voice sound effect.
     end
     if (btnp(5)) tb.char=#tb.str[tb.i] -- advance to the last character, to speed up the message.
 elseif btnp(5) then -- if already on the last message character and button ❎/x is pressed:
     if #tb.str>tb.i then -- if the number of strings to disay is larger than the current index (this means that there's another message to display next):
         tb.i+=1 -- increase the index, to display the next message on tb.str
         tb.cur=0 -- reset the buffer.
         tb.char=0 -- reset the character position.
     else -- if there are no more messages to display:
         reading=false -- set reading to false. this makes sure the text box isn't drawn on screen and can be used to resume normal gameplay.
     end
  elseif btnp(4) then
  	display_inventory()
 end
end

function tb_draw() -- this function draws the text box.
tb.x=mapx*8
tb.y=tb.y+mapy*8
 if reading then -- only draw the text box if reading is true, that is, if a text box has been called and tb_init() has already happened.
     rectfill(tb.x,tb.y,tb.x+tb.w,tb.y+tb.h,tb.col1) -- draw the background.
     rect(tb.x,tb.y,tb.x+tb.w,tb.y+tb.h,tb.col2) -- draw the border.
     print(sub(tb.str[tb.i],1,tb.char),tb.x+2,tb.y+2,tb.col3) -- draw the text.
 end
end
-->8
-- text boxes input

intro_story =
{"sir aaron..."
,"a magical treasure awaits!"
,"you must find all 16 magical\nscrolls to unlock the treasure."
,"solve the puzzles to find\nthe scrolls."
,"go forth!"}

__gfx__
00000000cccccccccccccccc3333cccccccccccc6655556655444444cccccccc0806660022222222222222222222222d00000000000000000000000099999999
00000000ccccccccc777cccc33cccccccccccccc6556d55655444444cccccccc00865507255555522222222222d2222200000000000000000000000092922229
00000000ccccccccccc77ccc3ccccccccccccccc5566d65555444444cccccccc000665705fffaff52222222222222dd200000000000000000000000094949499
00000000cccccccccccccccc3ccccccccccccccc56d6d66555444444cccccccc0066674055559555222222222d22222200000000000000000000000094449449
00000000ccccccccccccccc7ccccccccccccccc356d66665554444443ccccccc006d75405ddd9dd5222222222222222200000000000000000000000092549499
00000000ccccccccccccc777ccccccccccccccc356d66965554444443ccccccc0097664055555552222222222d22d22200000000000000000000000092549449
00000000ccccccccc77ccccccccccccccccccc335666d9655544444433cccccc0099d64022222222222222222222222200000000000000000000000092229429
00000000cccccccc77cccccccccccccccccc33335d666665554444443333cccc0006d6002222222222222222222222d200000000000000000000000099999999
4444444444444444445444444444444444444444c444444ccccccccccccccc443b8bbbb325202550225555225522222200000000000000000000000000000000
aaa444444444444444444954444444444444444445555554ccccccccc4c4444cbbbbbb8b255025502556d5525522222200000000000000000000000000000000
999aaaa4444444444444444444667644444444445fffaff5cccccccc444444448bb8bbbb222022005566d6555522222200000000000000000000000000000000
949999944444444444944544466766644444444455559555cccccccc44444444bbbbb8bb2250000056d6d6655522222200000000000000000000000000000000
99949494444444445444444446666665344444445ddd9dd5cccccccc444444443bbbbbb32520550056d666655522222200000000000000000000000000000000
444444444444444444454494666666653444444455555554cccccccc44444444343444332250555056d669655522222200000000000000000000000000000000
44444444444444444944444466666554334444444444444ccccccccc4c44cc4c33445333220055505666d9655522222200000000000000000000000000000000
4444444444444444445444545555554433334444cccccccccccccccccccc4ccc33344333000255505d6666655522222200000000000000000000000000000000
33333333333333333333333333333333444433333333333333333333cccc33330222222204000022550000200000000000000000000000000000000000000000
aaa33333333333333b3b333333333333444444333555555333333333cccccc330225225540400005500000020000000000000000000000000000000000000000
999aaaa33333333333b3333333667633444444435fffaff533333333ccccccc30052525204000000000002000000000000000000000000000000000000000000
93999993333333333333333336676663444444435555955533333333ccccccc32000000040000000000000220000000000000000000000000000000000000000
99939393333333333333333336666665444444445ddd9dd533333333cccccccc5555022244000000000000020000000000000000000000000000000000000000
33333333333333333333b3b366666665444444445555555333333333cccccccc5555025500400000000000200000000000000000000000000000000000000000
333333333333333333333b3366666553444444443333333333333333cccccccc5550005540000005500002020000000000000000000000000000000000000000
33333333333333333333333355555533444444443333333333333333cccccccc0000000004000055220000200000000000000000000000000000000000000000
6d5666665d6666653333333366d66d66000000004444444444444444000000003000000000000000422222242dddddd200000000000000000000000000000000
6d5566665d6666653333333355d66ddd000000004555555444444444000000000225225502252255425555222d5555dd00000000000000000000000000000000
ddddd6ddddddd6dd33667633ddd66d55000000005fffaff54444444400000000005252520052525225525552d55d555d00000000000000000000000000000000
666666d5655566d53667666356666d5600000000555595554444444400000000000000000000000025522552d55dd55d00000000000000000000000000000000
666666d5666666d53666666556d66d66000000005ddd9dd54444444400000000055502220555022222555552dd55555d00000000000000000000000000000000
ddd6ddd5ddd6ddd56666666555d6666600000000555555544444444400000000055502550555025525552252d555dd5d00000000000000000000000000000000
55d6665c55d5555566666553c5dddd6600000000444444444444444400000000055000550550005522552522dd55d5dd00000000000000000000000000000000
65d555cc66d6666555555533cc555d66000000004444444444444444000000000000000030000000222222242dddddd200000000000000000000000000000000
00000000000000000000000000000000000000000000555500000000000000000000000000000000000000000000000000000000000000000000000000000000
00005555555000000000000000000000000000000000599500000000000000000000000000000000000000000000000000000000000000000000000000000000
00055999595000000000000000000000000000000000559500000000000000000000000000000000000000000000000000000000000000000000000000000000
00059559955000000000000000000000000000000000595500000000000000000000000000000000000000000000000000000000000000000000000000000000
00059559995500000000000000000000000000000000555000000000000000000000000000000000000000000000000000000000000000000000000000000000
00055595995500000555055555555005550555555550000055555000000000000000000000000000000000000000000000000000000000000000000000000000
005555a5a9a50005559555a955a95055a555a955995500055a595000000000000000000000000000000000000000000000000000000000000000000000000000
005aa9555a950005a9aa9a5a9aa5555a9a955a995a9500559a955000000000000000000000000000000000000000000000000000000000000000000000000000
00555777777550555557755775757775577557755775005775555000000000000000000000000000000000000000000000000000000000000000000000000000
0055a599aa9a5059aaaa955aa55559a55aa559a55aa5055aa5aa5000000000000000000000000000000000000000000000000000000000000000000000000000
055a9a5555a955599559a59a95555a9559a55a9559a555999aa95000000000000000000000000000000000000000000000000000000000000000000000000000
55999999559999999999999999555999599599995999555555995500000000000000000000000000000000000000000000000000000000000000000000000000
59555999955955555955955595559999995555955595555999559500000000000000000000000000000000000000000000000000000000000000000000000000
59555595555555555555550555055559555005550555059559555500000000000000000000000000000000000000000000000000000000000000000000000000
59995555000559995000000000000055500000000000055555500000000000000000000000000000000000000000000000000000000000000000000000000000
55555000000599995500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000005599999550000000000000000000000555500000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000005999599950000000000000000000000599500000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055995559955550555000555500555555599555000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000005a9a555a9a5955595555599555595955999995000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000005aa95559aa5aa5aaa955a9aa55aa955aaa9a55000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000057775557775775577577755757755555577550000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000005a9a555a9a5a9559a55aa5aa59a9aa555aa500000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055a95559a559a55a9559a9555a9aa9555a9555000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000005999599955999999559955995559995599995000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000005999999555599959999999959999999999955000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000005559995559955555555999995595555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000055599555950000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000559999550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000055595500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
3131313131313101022122222222212118181818181818181818181818181818282828282828282828282828282828280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3112121112123101012122222222212121181818181818181818181818181818283b0a0a0b0b0b0a0a0a190a0a0a0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3111121210123102022121222222212121212118181818181818181818181818280a0b0a0a0b0b0b0a3b190a0b0a0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3112111211123101012121222221212121212121181818181818181818181818280a0a0a3b3b3b280a28190a0b0b0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
31111212111131010221212121212121212121181818181818181818181818182828280a282828190b0b190a0a0b0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3331310531313001042121212121212121212121181818181818181818181818280a3b0a3b0b0a190a0a193b3b0a3b280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0102011101010201212121212121212121202118181818181818181818181818280a0a0a0a0a0a190a0a190a0a0a0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0102021101020104212121212121212121222121211818181818181818181818280a0b0b0b0a0a190a0a190a0a0a0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121211424212121212121212121212122222221212121212121212118181818280a0a0b0b1928280a2828281a2828280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212112212121212121212121212222222222212121212121212121181818280a0a0a0a3b0a0b0a0a0a0a0a0a0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2222212112212121212121212121212121212221212121212121212121212138283b3b3b0a190a0b0b0b0a0a0a0a0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2222222111212121212121212121212121212221212121212121212121212128280b0a0a0a190a0a0a0a0a0a0a0a0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222221141112121212121212111212111211121111111211111211121211292a0b0b0a0a0a0a0a0a0a0a0b0b0b0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2122222121212121212121212111212121212121212121211821182118181439280a0b0a0a190a0a0b0b0b0b0b0b0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212111212121212132212118181818181818181818280a0a0a0a190a0a0a0a0a0a0a0a0a280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121322121212121212121212111212121212121211818181818181818181818282828282828282828282828282828280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212111212121212121212121212121212121212121212121212121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212111212121212121212121212121212121212121212121212121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212111212121212121212121212121212121212121212121212121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212111212121212121212121212121212121212121212121212121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212111212121212121212121212121212121212121212121212121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212111212121212121212121212121212121212121212121212121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212103010101272121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212101010101010127212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212116161616010101212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212101010101010104212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212107010101010422222121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121220701042222222121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212122222121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000e0500e0500e0500e0500d050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00010000120501205012050120501305015050190501c050220502905034050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
